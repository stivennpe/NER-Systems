# -*- coding: utf-8 -*-
"""NER_BILSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nc8U3B6K1NRthLixWEceoggjmFPi99cM
"""

%matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
np.random.seed(0)
plt.style.use("ggplot")

import tensorflow as tf
print('Tensorflow version:', tf.__version__)
print('GPU detected:', tf.config.list_physical_devices('GPU'))

#read the dataset
data_df = pd.read_csv("C:/Users/stive/Documents/NER/ner_dataset.csv", encoding="iso-8859-1", header=0)
data_df = data_df.fillna(method="ffill")
data_df.head()

print("Unique words in corpus:", data_df['Word'].nunique())
print("Unique tags in corpus:", data_df['Tag'].nunique())

words = list(set(data_df["Word"].values))
words.append("ENDPAD")
num_words = len(words)

tags = list(set(data_df["Tag"].values))
num_tags = len(tags)


data_df[data_df["Tag"]!="O"]["Tag"].value_counts().plot(kind="bar", figsize=(10,5))

#function to create a tuple and iterate the whole corpus to have word pos and tag
def to_tuples(data):
    iterator = zip(data["Word"].values.tolist(),
                   data["POS"].values.tolist(),
                   data["Tag"].values.tolist())
     
    return [(word, pos, tag) for word, pos, tag in iterator]
 
sentences = data_df.groupby("Sentence #").apply(to_tuples).tolist()
 
sentences[0]

#mapping words to index and tags to index

word2idx = {w: i + 1 for i, w in enumerate(words)}
tag2idx = {t: i for i, t in enumerate(tags)}
word2idx

#padding sequences
from tensorflow.keras.preprocessing.sequence import pad_sequences

max_len = 50

X = [[word2idx[w[0]] for w in s] for s in sentences]
X = pad_sequences(maxlen=max_len, sequences=X, padding="post", value=num_words-1)


y = [[tag2idx[w[2]] for w in s] for s in sentences]
y = pad_sequences(maxlen=max_len, sequences=y, padding="post", value=tag2idx["O"])

#Split into training, and test
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)


#creating the model

from tensorflow.keras import Model, Input
from tensorflow.keras.layers import LSTM, Embedding, Dense
from tensorflow.keras.layers import InputLayer, TimeDistributed, SpatialDropout1D, Bidirectional
from tensorflow import keras

model = keras.Sequential()
model.add(InputLayer((max_len)))
model.add(Embedding(input_dim=num_words, output_dim=max_len, input_length=max_len))
model.add(SpatialDropout1D(0.1))
model.add( Bidirectional(LSTM(units=100, return_sequences=True, recurrent_dropout=0.1)))

model.summary()

#plotting the model 

tf.keras.utils.plot_model(
    model, to_file='model.png', show_shapes=True, show_dtype=False,
    show_layer_names=True, rankdir='LR', expand_nested=True, dpi=300,
)

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from livelossplot.tf_keras import PlotLossesCallback

#%%time
# 
 logdir="log/"
 tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)
 
 chkpt = ModelCheckpoint("model_weights.h5", monitor='val_loss',verbose=1, save_best_only=True, save_weights_only=True, mode='min')
 
 early_stopping = EarlyStopping(monitor='val_accuracy', min_delta=0, patience=1, verbose=0, mode='max', baseline=None, restore_best_weights=False)
 
 callbacks = [PlotLossesCallback(), chkpt, early_stopping,tensorboard_callback]
 
 
 history = model.fit(
     x=x_train,
     y=y_train,
     validation_data=(x_test,y_test),
     batch_size=32, 
     epochs=3,
     callbacks=callbacks,
     verbose=1
     
 )

print("Evaluate on test data")
results = model.evaluate(x_test, y_test, batch_size=128)
print("test loss: {} ".format(results[0]))
print("test accuracy: {} ".format(results[1]))

i = np.random.randint(0, x_test.shape[0])
print("This is sentence:",i)
p = model.predict(np.array([x_test[i]]))
p = np.argmax(p, axis=-1)

print("{:15}{:5}\t {}\n".format("Word", "True", "Pred"))
print("-" *30)
for w, true, pred in zip(x_test[i], y_test[i], p[0]):
    print("{:15}{}\t{}".format(words[w-1], tags[true], tags[pred]))

sentence = "President Obama became the first sitting American president to visit Hiroshima"